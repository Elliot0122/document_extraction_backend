AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: >
  Document Extraction Backend
  
  SAM Template for deploying document extraction Lambda functions

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: Stage name for deployment (dev, staging, prod)
    
  S3Bucket:
    Type: String
    Default: doc-extract-test
    Description: S3 bucket for storing documents

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Architectures:
      - arm64
    Environment:
      Variables:
        LOG_LEVEL: INFO
        POWERTOOLS_SERVICE_NAME: document-extraction
        POWERTOOLS_METRICS_NAMESPACE: DocumentExtraction
        SAM_LOCAL: ""

Resources:
  # IAM Role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DocumentExtractionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}"
                  - !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                  - textract:DetectDocumentText
                  - textract:GetDocumentAnalysis
                  - textract:StartDocumentAnalysis
                  - textract:StartDocumentTextDetection
                Resource: '*'

  # Document Extraction Lambda Function
  DocumentExtractionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StageName}-document-extraction
      PackageType: Image
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Events:
        UploadEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: post
            RestApiId: !Ref ApiGateway
        QueryEvent:
          Type: Api
          Properties:
            Path: /query
            Method: post
            RestApiId: !Ref ApiGateway
    Metadata:
      DockerTag: python3.9-arm64
      DockerContext: ./
      Dockerfile: Dockerfile

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      BinaryMediaTypes:
          - multipart/form-data

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
    
  DocumentExtractionFunction:
    Description: Document Extraction Lambda Function ARN
    Value: !GetAtt DocumentExtractionFunction.Arn 